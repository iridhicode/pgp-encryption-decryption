package com.example.pgp.service;

import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.OutputStream;

import org.bouncycastle.util.io.Streams;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import name.neuhalfen.projects.crypto.bouncycastle.openpgp.BouncyGPG;
import name.neuhalfen.projects.crypto.bouncycastle.openpgp.keys.callbacks.KeyringConfigCallbacks;
import name.neuhalfen.projects.crypto.bouncycastle.openpgp.keys.keyrings.InMemoryKeyring;
import name.neuhalfen.projects.crypto.bouncycastle.openpgp.keys.keyrings.KeyringConfigs;

public class PGPEncryption {

	private static final Logger LOGGER = LoggerFactory.getLogger(PGPEncryption.class);

	
	public static byte[] signEncryptFile(InputStream sourceFile, InputStream sourcePrivateKey, String password,
			InputStream destPublicKey, InputStream sourcepublicKey, String recipient, String source) {
		try {
			
			// Adding bouncy castle to the Java Runtime
			// Bouncy castle is a library which provides cryptographic alogrithms

			BouncyGPG.registerProvider();
			long startTime = System.currentTimeMillis();

			final int BUFFSIZE = 8 * 1024;

			// Keyring Configurtaion are used to manage PGP Keys
			// KeyringConfigCallbacks will provide you the password for unlocking the keys
			// this will be the password generated by the user at the time of creation key
			// pair
			
			final InMemoryKeyring keyring = KeyringConfigs
					.forGpgExportedKeys(KeyringConfigCallbacks.withPassword(password));
			keyring.addSecretKey(PGPReader.readSecretKey(sourcePrivateKey).getEncoded());
			keyring.addPublicKey(PGPReader.readPublicKey(destPublicKey).getEncoded());
			keyring.addPublicKey(PGPReader.readPublicKey(sourcepublicKey).getEncoded());
			ByteArrayOutputStream destFile = new ByteArrayOutputStream();
			try (final OutputStream fileOutput = destFile;
					final BufferedOutputStream bufferedOut = new BufferedOutputStream(fileOutput, BUFFSIZE);

					//Recipient parameter is used to identity the destination public key
					//it helps to establish a secure communication 
					//encryption with destination public key ensures that decryption
					//can only be done via its own private Key
					
					
					
					//Source parameter ensures signing of the data with sender's private key
					//So that receiver can verify the authenticity of the data using the 
					//senders public key
					
					final OutputStream outputStream = BouncyGPG.encryptToStream().withConfig(keyring)
							.withStrongAlgorithms().toRecipient(recipient).andSignWith(source).binaryOutput()
							.andWriteTo(bufferedOut);

					final InputStream is = sourceFile) {
				Streams.pipeAll(is, outputStream);
			}
			long endTime = System.currentTimeMillis();

			LOGGER.info(String.format("Encryption took %.2f s", ((double) endTime - startTime) / 1000));
			return destFile.toByteArray();
		} catch (Exception e) {
			LOGGER.info("ERROR: " + e);
		}
		return null;
	}
	
}
