package com.example.pgp.service;

import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.security.Security;

import org.bouncycastle.util.io.Streams;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import name.neuhalfen.projects.crypto.bouncycastle.openpgp.BouncyGPG;
import name.neuhalfen.projects.crypto.bouncycastle.openpgp.keys.callbacks.KeyringConfigCallbacks;
import name.neuhalfen.projects.crypto.bouncycastle.openpgp.keys.keyrings.InMemoryKeyring;
import name.neuhalfen.projects.crypto.bouncycastle.openpgp.keys.keyrings.KeyringConfigs;

public class PgpDecryption {
	private static final Logger LOGGER = LoggerFactory.getLogger(PgpDecryption.class);

	public static byte[] decryptAndVerify(InputStream input, InputStream sourcePrivateKey, String password,
			InputStream destPublicKey, InputStream sourcePublicKey) {

		// Adding bouncy castle to the Java Runtime
		// Bouncy castle is a library which provides cryptographic alogrithms

		Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
		try {

			// Keyring Configurtaion are used to manage PGP Keys
			// KeyringConfigCallbacks will provide you the password for unlocking the keys
			// this will be the password generated by the user at the time of creation key
			// pair

			final InMemoryKeyring keyring = KeyringConfigs
					.forGpgExportedKeys(KeyringConfigCallbacks.withPassword(password));
			keyring.addSecretKey(PGPReader.readSecretKey(sourcePrivateKey).getEncoded());
			keyring.addPublicKey(PGPReader.readPublicKey(destPublicKey).getEncoded());
			keyring.addPublicKey(PGPReader.readPublicKey(sourcePublicKey).getEncoded());

			ByteArrayOutputStream fileOutput = new ByteArrayOutputStream();
			try (

					final BufferedOutputStream bufferedOut = new BufferedOutputStream(fileOutput);

					// DecryptandVerify will take the Encrypted file and try to decrypt it
					// from all keys added to the keyring while ignoring the signature of the file

					final InputStream plaintextStream = BouncyGPG.decryptAndVerifyStream().withConfig(keyring)
							.andIgnoreSignatures().fromEncryptedInputStream(input)

			) {
				// to copy the decrypted data to the buffered stream

				Streams.pipeAll(plaintextStream, bufferedOut);
			}
			return fileOutput.toByteArray();
		} catch (Exception e) {
			LOGGER.info("Exception: " + e.getMessage());
			e.printStackTrace();
		}
		return null;
	}

}
